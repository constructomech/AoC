
Pos : @value type = {
    public x : int = 0;
    public y : int = 0;
}

Direction : @enum type = {
    Undefined;
    Left;
    Up;
    Right;
    Down;
}

Node : @value type = {
    public heatLoss : int = 0;
    public pos : Pos = ();
    public dir : Direction = Direction::Undefined;
    public movesInDir : int = 0;
    public debug : std::string = "";
}

MinPathEntry : @value type = {
    public pos : Pos = ();
    public dir : Direction = Direction::Undefined;
    public movesInDir : int = 0;
}

split: (s : std::string, delim : char) -> std::vector<std::string> = {
    result : std::vector<std::string> = ();
    ss : std::stringstream = (s);
    item : std::string = "";

    assert(ss.gcount() == 0); // Avoid unused variable 'ss' error/bug
    while ss.getline(item, delim) {
        result.push_back(item);
    }

    return result;
}

readFile: (path: std::string) -> std::vector<std::string> = {
    data : std::vector<std::string> = ();
    input : std::ifstream = (path);
    line : std::string = "";

    while (std::getline(input, line)) {
        data.push_back(line);
    }

    input.close();
    return data;
}

charFromDir: (dir : Direction) -> char = {
    assert(dir != Direction::Undefined);

    if dir == Direction::Left {
        return '<';
    }
    if dir == Direction::Right {
        return '>';
    }
    if dir == Direction::Up {
        return '^';
    }
    if dir == Direction::Down {
        return 'v';
    }
    return '.';
}

buildNext: (priorNode : Node, moveDir : Direction, posHeatLoss : int, targetPos : Pos) -> Node = {
    nextNode : Node = ();

    nextMovesInDir := 1;
    if priorNode.dir == moveDir {
        nextMovesInDir = priorNode.movesInDir + 1;                    
    }

    nextNode.heatLoss = priorNode.heatLoss + posHeatLoss;
    nextNode.pos = targetPos;
    nextNode.dir = moveDir;
    nextNode.movesInDir = nextMovesInDir;
    nextNode.debug = priorNode.debug + charFromDir(moveDir);

    return nextNode;
}

getLowestHeatloss: (entry: MinPathEntry, lowestHeatLoss : std::map<MinPathEntry, int>) -> int = {

    it := lowestHeatLoss.find(entry);
    if it != lowestHeatLoss.end() {
        return it*.second;
    }

    return std::numeric_limits<int>::max();
}

main: () -> int = {
    result := std::numeric_limits<int>::max();
    data := readFile("input.txt");

    lowestHeatLoss : std::map<MinPathEntry, int> = ();
    assert(lowestHeatLoss.ssize() == 0);

    endPos : Pos = ();
    endPos.x = data[0].ssize() - 1;
    endPos.y = data.ssize() - 1;

    cmp := :(left : Node, right : Node) -> bool = right.heatLoss < left.heatLoss;
    q : std::priority_queue<Node, std::vector<Node>, decltype(cmp)> = (cmp);
    start1 : Node = ();
    start1.dir = Direction::Right;
    start2 : Node = ();
    start2.dir = Direction::Down;

    q.push(start1);
    q.push(start2);
    
    while q.ssize() > 0 {
        item := q.top();
        q.pop();

        entry : MinPathEntry = ();
        entry.pos = item.pos;
        entry.dir = item.dir;
        entry.movesInDir = item.movesInDir;

        pos := item.pos;
        if item.heatLoss < getLowestHeatloss(entry, lowestHeatLoss) {
            lowestHeatLoss[entry] = item.heatLoss;
        }
        else {
            continue;
        }

        if pos.x == endPos.x && pos.y == endPos.y && item.movesInDir >= 4 {
            if item.heatLoss < result {
                std::cout << item.heatLoss << ": " << item.debug << std::endl;
                result = item.heatLoss;
            }
            continue;
        }
        else {
            // For each possible direction, explore if valid
            if pos.x - 1 >= 0 && item.dir != Direction::Right {  // Left
                nextPos := pos;
                nextPos.x--;
                nextNode := buildNext(item, Direction::Left, data[pos.y][pos.x - 1] - '0', nextPos);

                if nextNode.movesInDir <= 10 && (nextNode.dir == item.dir || item.movesInDir >= 4) {
                    q.push(nextNode);
                }
            }
            if pos.y - 1 >= 0 && item.dir != Direction::Down {  // Up
                nextPos := pos;
                nextPos.y--;
                nextNode := buildNext(item, Direction::Up, data[pos.y - 1][pos.x] - '0', nextPos);

                if nextNode.movesInDir <= 10 && (nextNode.dir == item.dir || item.movesInDir >= 4) {
                    q.push(nextNode);
                }
            }
            if pos.x + 1 < data[0].ssize() && item.dir != Direction::Left {  // Right
                nextPos := pos;
                nextPos.x++;
                nextNode := buildNext(item, Direction::Right, data[pos.y][pos.x + 1] - '0', nextPos);

                if nextNode.movesInDir <= 10 && (nextNode.dir == item.dir || item.movesInDir >= 4) {
                    q.push(nextNode);
                }
            }
            if pos.y + 1 < data.ssize() && item.dir != Direction::Up {  // Down
                nextPos := pos;
                nextPos.y++;
                nextNode := buildNext(item, Direction::Down, data[pos.y + 1][pos.x] - '0', nextPos);

                if nextNode.movesInDir <= 10 && (nextNode.dir == item.dir || item.movesInDir >= 4) {
                    q.push(nextNode);
                }
            }
        }
    }

    std::cout << "Result: " << result << std::endl;
}
