
Pattern : @value type = {
    public data : std::vector<std::string> = ();

    operator=: (out this, input: std::vector<std::string>) = {
        data = input;
    }

    findRowFold: (this) -> int = {
        row := 0;
        while row < data.ssize() - 1 {
            if verifyRowFold(row) {
                return row;
            }
            row++;
        }
        return -1;
    }

    findColFold: (this) -> int = {
        col := 0;
        while col < data[0].ssize() - 1 {
            if verifyColFold(col) {
                return col;
            }
            col++;
        }        
        return -1;
    }

    verifyRowFold: (this, row : int) -> bool = {
        u := row;
        d := row + 1;

        mismatches := 0;
        while u >= 0 && d < data.ssize() {

            i := 0;
            while i < data[u].ssize() {
                if data[u][i] != data[d][i] {
                    mismatches++;
                }
                i++;
            }
            u--;
            d++;
        }

        return mismatches == 1;
    }

    verifyColFold: (this, col : int) -> bool = {

        mismatches := 0;

        for data do (row) {

            l := col;
            r := col + 1;
            while l >= 0 && r < row.ssize() {
                if row[l] != row[r] {
                    mismatches++;
                }
                l--;
                r++;
            }
        }

        return mismatches == 1;
    }
}

min: (x: int, y: int) -> int = {
    if x < y {
        return x;
    }
    return y;
}

convertToIntArray: (data : std::vector<std::string>) -> std::vector<int> = {
    result : std::vector<int> = ();

    for data do (item)
    {
        val := std::stoi(item);
        result.push_back(val);
    }

    return result;
}

split: (s : std::string, delim : char) -> std::vector<std::string> = {
    result : std::vector<std::string> = ();
    ss : std::stringstream = (s);
    item : std::string = "";

    assert (ss.gcount() == 0); // Avoid unused variable 'ss' error/bug
    while ss.getline(item, delim) {
        result.push_back(item);
    }

    return result;
}

readFile: (path: std::string) -> std::vector<std::string> = {
    data : std::vector<std::string> = ();
    input : std::ifstream = (path);
    line : std::string = "";

    while (std::getline(input, line)) 
    {
        data.push_back(line);
    }

    input.close();

    return data;
}


main: () -> int = {
    result := 0;
    rawData := readFile("input.txt");

    patterns : std::vector<Pattern> = ();
    patternData : std::vector<std::string> = ();

    for rawData do (line) {

        if (line.ssize() == 0) {
            newPattern : Pattern = (patternData);            
            patterns.push_back(newPattern);
            patternData.clear();
        }
        else {
            patternData.push_back(line);
        }
    }
    newPattern : Pattern = (patternData);            
    patterns.push_back(newPattern);

    // Find the mirror point
    for patterns do (pattern) {
        
        rowFold := pattern.findRowFold();
        colFold := pattern.findColFold();

        if rowFold != -1 {
            result += 100 * (rowFold + 1);
        }

        if colFold != -1 {
            result += colFold + 1;
        }
    }

    std::cout << "Result: " << result << std::endl;
}
