// Example type
Foo : type = {
    bar: int;

     operator=: (out this, n: int) = {
        bar = n;
    }

    testMethod: (this) -> int = {
        return this.bar;
    }
}

// Example trivial function
hello: (msg: _) = std::cout << "Hello " << msg << std::endl;

// Example of a for loop 
// for std::views::iota(0, 10) do (i) {
//     // Do something hopefully more expensive than expanding a std::range
// }

convertToIntArray: (data : std::vector<std::string>) -> std::vector<int> = {
    result : std::vector<int> = ();

    for data do (item)
    {
        val := std::stoi(item);
        result.push_back(val);
    }

    return result;
}

readFile: (path: std::string) -> std::vector<std::string> = {
    data : std::vector<std::string> = ();
    input : std::ifstream = (path);
    line : std::string = "";

    while (std::getline(input, line)) 
    {
        data.push_back(line);
    }

    input.close();

    return data;
}

getDigit: (str: std::string, pos : size_t) -> char = {
    if isdigit(str[pos]) {
        return str[pos];
    }
    else if (str.substr(pos, 4) == "zero") {
        return '0';
    }
    else if (str.substr(pos, 3) == "one") {
        return '1';
    }
    else if (str.substr(pos, 3) == "two") {
        return '2';
    }
    else if (str.substr(pos, 5) == "three") {
        return '3';
    }
    else if (str.substr(pos, 4) == "four") {
        return '4';
    }
    else if (str.substr(pos, 4) == "five") {
        return '5';
    }
    else if (str.substr(pos, 3) == "six") {
        return '6';
    }
    else if (str.substr(pos, 5) == "seven") {
        return '7';
    }
    else if (str.substr(pos, 5) == "eight") {
        return '8';
    }
    else if (str.substr(pos, 4) == "nine") {
        return '9';
    }
    return -1;
}

main: () -> int = {
    result := 0;
    data := readFile("input.txt");

    for data do (item) {

        firstNum : char = -1;
        lastNum : char = -1;

        i : size_t = 0;
        while i < item.size() {

            c := getDigit(item, i);
            if c != -1 {

                if firstNum == -1 {
                    firstNum = c;
                }
                lastNum = c;
            }
            i++;
        }

        lineVal : std::string = "";
        lineVal += firstNum;
        lineVal += lastNum;
        val := std::stoi(lineVal);
        result += val;
    }

    std::cout << "Result: " << result << std::endl;
}
