
PulseStrength : @enum type = {
    Undefined;
    Low;
    High;
}

ModuleType : @enum type = {
    Undefined;
    Button;
    Broadcaster;
    FlipFlop;
    Conjunction;
}

Pulse : @value type = {
    public from : std::string = "";
    public strength : PulseStrength = PulseStrength::Undefined;
    public destination : std::string = "";
}

// Routes outputs from a module to connected modules and counts pulses
Router : type = {
    public highPulses : i64 = 0;
    public lowPulses : i64 = 0;

    init : (inout this) = {
        it := modules.begin();
        while it != modules.end() {
            inputDependenies : std::vector<std::string> = ();
            for connections do (connectionItem) {
                for connectionItem.second do (connection) {
                    if connection == it*.moduleName {
                        inputDependenies.push_back(connectionItem.first);
                    }
                }
            }

            it*.init(inputDependenies);
            it++;
        }
    }

    sendPulse : (inout this, from : std::string, strength : PulseStrength) = {
        recipients := connections.at(from);

        for recipients do (recipient) {
            pulse : Pulse = ();
            pulse.from = from;
            pulse.strength = strength;
            pulse.destination = recipient;
            q.push(pulse);
        }
    }

    getModuleIt : (inout this, moduleName : std::string, mustExist : bool) -> std::vector<Module>::iterator = {
        it := modules.begin();
        while it != modules.end() {
            if it*.moduleName == moduleName {
                return it;
            }
            it++;
        }
        assert(!mustExist);
        return modules.end();
    }

    pressButton : (inout this) = {
        buttonIt := getModuleIt("button", true);
        buttonIt*.recievePulse(this, "start", PulseStrength::Low);

        while processPulse() {}
    }

    addModule : (inout this, moduleName : std::string, moduleType : ModuleType, connectedModules : std::vector<std::string>) = {
        newModule : Module = (moduleName, moduleType);

        modules.emplace_back(newModule);
        connections[moduleName] = connectedModules;
    }

    private processPulse: (inout this) -> bool = {
        if q.ssize() > 0 {
            pulse := q.front();
            q.pop();

            std::cout << pulse.from << " -> " << pulse.destination << std::endl;

            targetModuleIt := getModuleIt(pulse.destination, false);
            if targetModuleIt != modules.end() {
                targetModuleIt*.recievePulse(this, pulse.from, pulse.strength);
            }

            if pulse.strength == PulseStrength::Low {
                lowPulses++;
            }
            else if pulse.strength == PulseStrength::High {
                highPulses++;
            }

            return true;
        }
        return false;
    }

    modules : std::vector<Module> = ();
    connections : std::unordered_map<std::string, std::vector<std::string>> = ();
    q : std::queue<Pulse> = ();
}

Module : @copyable type = {

    public moduleName : std::string;
    public moduleType : ModuleType;
    public flipFlopOn : bool;
    public conjunctionState : std::unordered_map<std::string, PulseStrength>;

    operator=: (out this) = {
        moduleName = "";
        moduleType = ModuleType::Undefined;
        flipFlopOn = false;
        conjunctionState = ();
    }

    operator=: (out this, _moduleName : std::string, _moduleType: ModuleType) = {
        moduleName = _moduleName;
        moduleType = _moduleType;
        flipFlopOn = false;
        conjunctionState = ();
    }

    init : (inout this, inboundConnections : std::vector<std::string>) = {
        if moduleType == ModuleType::Conjunction {
            for inboundConnections do (inboundConnection) {
                conjunctionState.emplace(inboundConnection, PulseStrength::Low);
            }
        }
    }

    recievePulse : (inout this, inout router : Router, from : std::string, pulseStrength : PulseStrength) = {
        // Process pulse, enqueing any further pulses via the router.

        if moduleType == ModuleType::Button {
            router.sendPulse(moduleName, PulseStrength::Low);
        }
        else if moduleType == ModuleType::Broadcaster {
            router.sendPulse(moduleName, pulseStrength);
        }
        else if moduleType == ModuleType::FlipFlop {
            if pulseStrength != PulseStrength::High {
                if flipFlopOn {
                    router.sendPulse(moduleName, PulseStrength::Low);
                }
                else {
                    router.sendPulse(moduleName, PulseStrength::High);
                }
                flipFlopOn = !flipFlopOn;
            }
        }
        else if moduleType == ModuleType::Conjunction {
            conjunctionState.at(from) = pulseStrength;
            
            allHigh := true;
            for conjunctionState do (inputState) {
                if inputState.second != PulseStrength::High {
                    allHigh = false;
                    break;
                }                
            }

            if allHigh {
                router.sendPulse(moduleName, PulseStrength::Low);                
            }
            else {
                router.sendPulse(moduleName, PulseStrength::High);
            }
        }
        else {
            assert(false);
        }
    }
}

split: (s : std::string, delim : char) -> std::vector<std::string> = {
    result : std::vector<std::string> = ();
    ss : std::stringstream = (s);
    item : std::string = "";

    assert(ss.gcount() == 0); // Avoid unused variable 'ss' error/bug
    while ss.getline(item, delim) {
        result.push_back(item);
    }

    return result;
}

readFile: (path: std::string) -> std::vector<std::string> = {
    data : std::vector<std::string> = ();
    input : std::ifstream = (path);
    line : std::string = "";

    while (std::getline(input, line)) {
        data.push_back(line);
    }

    input.close();
    return data;
}

getType: (name : std::string) -> ModuleType = {
    if name == "broadcaster" {
        return ModuleType::Broadcaster;
    }
    typeIndicator := name.substr(0, 1)[0];
    if typeIndicator == '%' {
        return ModuleType::FlipFlop;
    }
    assert(typeIndicator == '&');
    return ModuleType::Conjunction;
}

getName: (name : std::string) -> std::string = {
    if name == "broadcaster" {
        return "broadcaster";
    }
    return name.substr(1);
}

main: () -> int = {
    result := 0;
    data := readFile("input.txt");

    // Create and populate the router for the machine config in input.txt
    router : Router = ();

    for data do (line) {

        parts := line.split(' ');
        moduleType := getType(parts[0]);
        moduleName := getName(parts[0]);

        connections : std::vector<std::string> = ();
        for std::views::iota(2, parts.ssize()) do (i) {
            parts2 := parts[i].split(',');
            connections.push_back(parts2[0]);
        }

        router.addModule(moduleName, moduleType, connections);
    }
    connections : std::vector<std::string> = ();
    connections.push_back("broadcaster");
    router.addModule("button", ModuleType::Button, connections);
    router.init();

    // Run the machine for 1000 iterations:
    for std::views::iota(0, 1000) do (i) {

        // Press the button directly, not through the router, so the router doesn't count an input pulse
        router.pressButton();
    }

    std::cout << "Low pulses: " << router.lowPulses << std::endl;
    std::cout << "high pulses: " << router.highPulses << std::endl;

    result = router.lowPulses * router.highPulses;

    std::cout << "Result: " << result << std::endl;
}
