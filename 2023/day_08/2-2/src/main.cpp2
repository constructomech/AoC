
split: (s : std::string, delim : char) -> std::vector<std::string> = {
    result : std::vector<std::string> = ();
    ss : std::stringstream = (s);
    item : std::string = "";

    assert (ss.gcount() == 0); // Avoid unused variable 'ss' error/bug
    while ss.getline(item, delim) {
        result.push_back(item);
    }

    return result;
}

readFile: (path: std::string) -> std::vector<std::string> = {
    data : std::vector<std::string> = ();
    input : std::ifstream = (path);
    line : std::string = "";

    while (std::getline(input, line)) 
    {
        data.push_back(line);
    }

    input.close();

    return data;
}

main: () -> int = {
    data := readFile("input.txt");

    instructions := data[0];
    data.erase(data.begin(), data.begin() + 2);

    std::cout << instructions << std::endl;

    graph : std::unordered_map<std::string, std::tuple<std::string, std::string>> = ();
    startNodes : std::vector<std::string> = ();

    // Implement 
    for data do (line) {
        //AAA = (BBB, CCC)

        parts1 := split(line, '=');
        nodeName := parts1[0].substr(0, parts1[0].ssize() - 1);
        
        parts2 := split(parts1[1], ',');
        leftNode := parts2[0].substr(2);
        rightNode := parts2[1].substr(1, parts2[1].ssize() - 2);

        std::cout << nodeName << " -> (" << leftNode << ", " << rightNode << ")" << std::endl;

        graph[nodeName] = std::make_tuple(leftNode, rightNode);
        if nodeName[nodeName.ssize() - 1] == 'A' {
            startNodes.push_back(nodeName);
        }
    }

    vals : std::vector<i64> = ();

    for startNodes do (node) {
        current := node;

        i := 0;
        do {
            instruction := instructions[i % instructions.ssize()];
            directions := graph[current];

            if instruction == 'L' {
                current = get<0>(directions);
            }
            else {
                current = get<1>(directions);
            }

            i++;

        } while current[current.ssize() - 1] != 'Z';

        vals.push_back(i);
    }

    gcf : i64 = 0;
    test : i64 = 2;
    out: while true {
        for vals do (val) {
            if test > val / 2 {
                break out;
            }
            if val % test != 0 {
                test++;
                continue out;
            }
        }
        gcf = test;
        test++;
    }

    result : i64 = gcf;
    for vals do (val) {
        temp := val / gcf;
        result *= temp;
    }

    std::cout << "Result: " << result << std::endl;
}
