
convertToIntArray: (data : std::vector<std::string>) -> std::vector<int> = {
    result : std::vector<int> = ();

    for data do (item)
    {
        val := std::stoi(item);
        result.push_back(val);
    }

    return result;
}

split: (s : std::string, delim : char) -> std::vector<std::string> = {
    result : std::vector<std::string> = ();
    ss : std::stringstream = (s);
    item : std::string = "";

    assert (ss.gcount() == 0); // Avoid unused variable 'ss' error/bug
    while ss.getline(item, delim) {
        result.push_back(item);
    }

    return result;
}

readFile: (path: std::string) -> std::vector<std::string> = {
    data : std::vector<std::string> = ();
    input : std::ifstream = (path);
    line : std::string = "";

    while (std::getline(input, line)) 
    {
        data.push_back(line);
    }

    input.close();

    return data;
}

combinations: (inout cache : std::map<std::tuple<int, int>, i64>, input : std::string, inputIndex : int, pattern : std::vector<int>, patternIndex) -> i64 = {
    result : i64 = 0;

    // Terminal condition
    if patternIndex >= pattern.ssize() {
        return input.find('#', inputIndex) == std::string::npos;
    }
    if inputIndex >= input.ssize() {
        return 0;
    }

    // Check cache
    cacheKey := std::make_tuple(inputIndex, patternIndex);
    it := cache.find(cacheKey);
    if it != cache.end() {
        return it*.second;
    }

    // RECURSE 1: Place a . in this spot
    // If input[inputIndex] is '?' or '.'
    if input[inputIndex] != '#' {   // We can't add a . here since there is a # already.
        result += combinations(cache, input, inputIndex + 1, pattern, patternIndex);
    }

    // RECURSE 2: Place #'s for the size in the pattern 
    matchesPattern := true;
    i := 0;
    while i < pattern[patternIndex] {
        if inputIndex + i >= input.ssize() || input[inputIndex + i] == '.' {   // We can't add a # here since there is a . already.
            matchesPattern = false;
        }
        i++;
    }
    if inputIndex + i < input.ssize() && input[inputIndex + i] == '#' {  // If there's a # here after we placed that is an error.
        matchesPattern = false;
    }

    if matchesPattern {
        result += combinations(cache, input, inputIndex + i + 1, pattern, patternIndex + 1);
    }

    // Save to cache
    cache[cacheKey] = result;

    return result;
}

main: () -> int = {
    result : i64 = 0;

    data := readFile("input.txt");

    for data do (line) {
        cache : std::map<std::tuple<int, int>, i64> = ();

        parts := line.split(' ');
        //input := parts[0];
        //patternStrs := parts[1];
        input := parts[0] + '?' + parts[0] + '?' + parts[0] + '?' + parts[0] + '?' + parts[0];
        patternStrs := parts[1] + ',' + parts[1] + ',' + parts[1] + ',' + parts[1] + ',' + parts[1]; 
        pattern := convertToIntArray(patternStrs.split(','));        

        combos := combinations(cache, input, 0, pattern, 0);
        std::cout << "Found " << combos << std::endl;
        result += combos;
    }

    std::cout << "Result: " << result << std::endl;
}
